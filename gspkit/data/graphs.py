from typing import Callable

import networkx as nx
import numpy as np

from scipy.spatial.distance import pdist, squareform

from gspkit import typing
from gspkit import input_checks
from gspkit import exceptions

def ensure_connectedness(generator: Callable) -> None | nx.Graph:
    r"""Draw a random graph until finding a connected one.
    """

    # TODO Testing

    i = 1
    while True:
        G = generator()
        if nx.is_connected(G):
            return G
        else:
            i += 1

        if i>500:
            return None

def assign_signs(G: nx.Graph, fraction: float, rng: typing.RNG_TYPE=None):
    r"""Convert an unsigned graph to signed one by random sign assignment.

    Given an unsigned graph G, this function generates a signed graph by
    assigning a negative sign to a randomly selected fraction of G's edges and
    keeping the other edges as positive.

    Parameters
    ----------
    G : nx.Graph
        Input graph. Modifies G in-place.
    fraction : float
        Fraction of edges to be set as negative edge.
    rng : typing.RNG_TYPE, optional
        Random number generator. If one wants the function to return the same
        output every time, this needs to be set. By default None.
    """
    
    # TODO Testing

    rng = input_checks.check_rng(rng)

    nx.set_edge_attributes(
        G, {e: -1 if rng.binomial(1, fraction) else 1 for e in G.edges}, "sign"
    )

def gen_random_geometric_graph(
        n_nodes: int, sigma: float=0.25, th: float=0.6, n_dim: int=2, 
        rng: typing.RNG_TYPE=None
    ):
    r"""Generate a random geometric graph. 

    A random geometric graph is a graph generated from a n-dimensional point
    cloud where points are drawn uniformly from unit square :math:`[0, 1]^n`.
    In the generated graph, each point is a node and two nodes are connected
    with a binary edge if their similarity is larger than a threshold.
    Similarity of points are measured using RBF kernel.

    Parameters
    ----------
    n_nodes : int
        Number of nodes.
    sigma : float, optional
        Scale of the RBF kernel, by default 0.25.
    th : float, optional
        Threshold used to determine which nodes are connected, by default 0.6.
    n_dim : int, optional
        The dimension of point cloud.
    rng : typing.RNG_TYPE
        Random number generator. If one wants the function to return the same
        output every time, this needs to be set. By default None.

    Returns
    -------
    nx.Graph
        Generated graph.
    """

    # TODO Testing

    points = rng.uniform(0, 1, size=(n_nodes, n_dim))

    dists = pdist(points, "sqeuclidean")
    rbf = np.exp(-dists/(sigma**2))
    
    rbf[rbf < th] = 0
    
    return nx.from_numpy_array(squareform(rbf))

def gen_graph(
        n_nodes: int, model: str, model_params: dict = {}, ensure_connected: bool = True, 
        rng: typing.RNG_TYPE = None
    ):
    r"""Generate a random graph from a random graph model.

    This function is implemented to provide a single API point that can be
    called to generate graphs from different random graph models. 

    Parameters
    ----------
    n_nodes : int
        Number of nodes. 
    model : str
        The random graph model to use for generating the graph. Currently, the
        followings are supported:

        - `er`: Erdős–Rényi graph. See `nx.erdos_renyi_graph` for the
            details.
        - `ba`: Barabási–Albert graph. See `nx.barabasi_albert_graph` for
            the details.
        - `rgg`: Random geometric graph. See `gen_random_geometric_graph`
            for the details.
        - `signed-er`: Signed Erdős–Rényi graph which is generated by first
            creating an Erdős–Rényi graph and then setting a randomly selected
            fraction of the generated graph as negative edges.
        - `signed-ba`: Signed Barabási–Albert graph which is generated by
            first creating an Barabási–Albert graph and then setting a randomly
            selected fraction of the generated graph as negative edges.
            
    model_params : dict, optional
        The dictionary of parameters for the random graph model. Parameters of
        the models differ and they are listed below:

        - `p`: Edge probility of Erdős–Rényi graph. Used when `model` is
          `er` or `signed-er`. By default 0.1
        - `m`: Growth parameter of Barabási–Albert graph. Used when
          `model` is `ba` or `signed-ba`. By defualt 5.
        - `sigma`: Scale of RBF kernel used for generating random geometric
          graph. Used when `model` is `rgg`. By defualt 0.25.
        - `th`: Threshold used for generating random geometric graph.
          Used when `model` is `rgg`. By default 0.6.
        - `n_dim`: Dimensionality of point cloud used for generating random
          geometric graph. Used when `model` is `rgg`. By default 2.
        - `frac`: Fraction of negative edges. Used when `model` is
          `signed-er` or `signed-ba`. By defualt 0.5.

    ensure_connected : bool, optional
        Flag to ensure the generated graph is connected. The function keeps
        generating a new graph until generating a connected one. The function
        stops searching a connected graph generating 500 graphs and returns an
        error. For signed graphs, connectedness is defined in terms of topology
        (signed of edges are ignored). By default True.
    rng : typing.RNG_TYPE, optional
        Random number generator. If one wants the function to return the same
        output every time, this needs to be set. By default None.

    Returns
    -------
    nx.Graph
        Generated graph.

    Raises
    ------
    exceptions.MaxIterReachedException
        When connectedness cannot be ensured.
    """

    # TODO Testing
    
    rng = input_checks.check_rng(rng)

    if model in ["er", "signed-er"]:
        
        if "p" not in model_params:
            model_params["p"] = 0.1

        generator = lambda: nx.erdos_renyi_graph(n_nodes, model_params["p"], seed=rng)
    elif model in ["ba", "signed-ba"]:

        if "m" not in model_params:
            model_params["m"] = 5
        
        generator = lambda: nx.barabasi_albert_graph(n_nodes, model_params["m"], seed=rng) 
    elif model == "rgg":

        if "sigma" not in model_params:
            model_params["sigma"] = 0.25
        if "th" not in model_params:
            model_params["th"] = 0.6
        if "n_dim" not in model_params:
            model_params["n_dim"] = 2

        generator = lambda: gen_random_geometric_graph(
            n_nodes, model_params["sigma"], model_params["th"], model_params["n_dim"], 
            rng=rng
        )

    if ensure_connected:
        G = ensure_connectedness(generator)
        if G is None:
            raise exceptions.MaxIterReachedException(
                "I cannot create a connected graph with the given model parameters."
            )
        
    if model in ["signed-er", "signed-ba"]:
        if "frac" not in model_params:
            model_params["frac"] = 0.5

        assign_signs(G, model_params["frac"], rng)

    return G