{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"api/filters/","title":"Filters","text":""},{"location":"api/filters/#gspkit.filters.gaussian","title":"<code>gaussian(graph: nx.Graph, shift: float = 0) -&gt; npt.NDArray</code>","text":"<p>Construct a Gaussian filter defined on the input graph.</p> Definition <p>Gaussian filter definition is based on [Kalofolias16]. Namely, let \\(\\mathbf{L}\\) be the graph Laplacian:</p> \\[ h(\\mathbf{L}) = \\left(     \\frac{1}{\\lambda_{max}}\\mathbf{L} + s\\mathbf{I} \\right)^{-1/2},  \\] <p>where \\(s\\) is the filter parameter.</p> <p>Parameters:</p> <ul> <li> <code>graph</code>               (<code>Graph</code>)           \u2013            <p>Input graph.</p> </li> <li> <code>shift</code>               (<code>float</code>, default:                   <code>0</code> )           \u2013            <p>Filter parameter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>filter_mat</code> (              <code>NDArray</code> )          \u2013            <p>(N, N) filter matrix \\(h(\\mathbf{L})\\), where N is the number of nodes.</p> </li> </ul>"},{"location":"api/filters/#gspkit.filters.heat","title":"<code>heat(graph: nx.Graph, alpha: int = 5) -&gt; npt.NDArray</code>","text":"<p>Construct a Heat kernel filter defined on the input graph.</p> Definition <p>Heat kernel definition is based on [Kalofolias16], which defines it as follows:</p> \\[ h(\\mathbf{L}) = \\exp\\left(     - \\frac{\\alpha}{\\lambda_{max}}\\mathbf{L}  \\right),  \\] <p>where \\(\\mathbf{L}\\) is the graph Laplacian, and \\(\\alpha\\) is the filter parameter.</p> <p>Parameters:</p> <ul> <li> <code>graph</code>               (<code>Graph</code>)           \u2013            <p>Input graph.</p> </li> <li> <code>alpha</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>Filter parameter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>filter_mat</code> (              <code>NDArray</code> )          \u2013            <p>(N, N) filter matrix \\(h(\\mathbf{L})\\), where N is the number of nodes.</p> </li> </ul>"},{"location":"api/filters/#gspkit.filters.tikhonov","title":"<code>tikhonov(graph: nx.Graph, alpha: int = 5) -&gt; npt.NDArray</code>","text":"<p>Construct a Tikhonov filter defined on the input graph.</p> Definition <p>Tikhonov filter definition is based on [Kalofolias16], which defines it as follows:</p> \\[     h(\\mathbf{L}) = \\left(         \\mathbf{I} + \\frac{\\alpha}{\\lambda_{max}}\\mathbf{L}     \\right)^{-1} \\] <p>where \\(\\mathbf{L}\\) is the graph Laplacian, and \\(\\alpha\\) is the filter parameter.</p> <p>Parameters:</p> <ul> <li> <code>graph</code>               (<code>Graph</code>)           \u2013            <p>Input graph.</p> </li> <li> <code>alpha</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>Filter parameter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>filter_mat</code> (              <code> </code> )          \u2013            <p>(N, N) filter matrix \\(h(\\mathbf{L})\\), where N is the number of nodes.</p> </li> </ul>"},{"location":"api/linalg/","title":"Linear Algebra","text":"<p>This module implements functions for commonly used graph-related linear algebraic operations.</p>"},{"location":"api/linalg/#gspkit.linalg.get_laplacian_spectrum","title":"<code>get_laplacian_spectrum(graph: nx.Graph) -&gt; tuple[npt.NDArray, npt.NDArray]</code>","text":"<p>Get Laplacian spectrum of the input graph.</p> <p>Warning</p> <p>This function employs dense version of eigendecomposition. So it is not scalable to large graphs.</p> <p>Parameters:</p> <ul> <li> <code>graph</code>               (<code>Graph</code>)           \u2013            <p>Input graph.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>eig_vals</code> (              <code>NDArray</code> )          \u2013            <p>(N, ) dimensional array of the graph Laplacian eigenvalues in ascending order.</p> </li> <li> <code>eig_vecs</code> (              <code>NDArray</code> )          \u2013            <p>(N, N) dimensional matrix, whose columns are the graph Laplacian eigenvectors. <code>eig_vecs[:, i]</code> corresponds to <code>eig_vals[i]</code>.</p> </li> </ul>"},{"location":"api/typing/","title":"Typing","text":""},{"location":"api/typing/#gspkit.typing.RNGType","title":"<code>RNGType = Optional[np.random.Generator | int]</code>","text":"<p>The type alias for random number generator. </p> <ul> <li>If an <code>int</code>, a random number generator whose seed number is set to   the given number is created. </li> <li>If <code>np.random.Generator</code>, it is used as the random number generator.</li> <li>If <code>None</code>, a random generator without setting any seed number is   created.</li> </ul>"},{"location":"api/typing/#gspkit.typing.FilterType","title":"<code>FilterType</code>","text":"<p>Enum class for available graph filters, which are listed below:</p>"},{"location":"api/typing/#gspkit.typing.FilterType.GAUSSIAN","title":"<code>GAUSSIAN = 'gaussian'</code>","text":"<p>Gaussian filter for graphs implemented with graph Laplacian. See gspkit.filters.gaussian the for filter defition.</p>"},{"location":"api/typing/#gspkit.typing.FilterType.HEAT","title":"<code>HEAT = 'heat'</code>","text":"<p>Heat kernel filter for graphs implemented with graph Laplacian. See gspkit.filters.heat the for filter defition.</p>"},{"location":"api/typing/#gspkit.typing.FilterType.TIKHONOV","title":"<code>TIKHONOV = 'tikhonov'</code>","text":"<p>Tikhonov filter for graphs implemented with graph Laplacian. See gspkit.filters.tikhonov the for filter defition.</p>"},{"location":"api/typing/#gspkit.typing.GraphModelType","title":"<code>GraphModelType</code>","text":"<p>Enum class for available graph models, which are listed below:</p>"},{"location":"api/typing/#gspkit.typing.GraphModelType.BA","title":"<code>BA = 'ba'</code>","text":"<p>Barab\u00e1si\u2013Albert graph. The model details can be found gspkit.data.graphs.gen_ba.</p>"},{"location":"api/typing/#gspkit.typing.GraphModelType.ER","title":"<code>ER = 'er'</code>","text":"<p>Erd\u0151s-R\u00e9nyi graph. The model details can be found gspkit.data.graphs.gen_er.</p>"},{"location":"api/typing/#gspkit.typing.GraphModelType.RGG","title":"<code>RGG = 'rgg'</code>","text":"<p>Random Geometric Graph. The model details can be found gspkit.data.graphs.gen_rgg.</p>"},{"location":"api/typing/#gspkit.typing.GraphModelType.SIGNED_BA","title":"<code>SIGNED_BA = 'signed-ba'</code>","text":"<p>Signed Barab\u00e1si\u2013Albert graph. Implementation details can be at [gspkit.data.graphs.gen_signed_ba]</p>"},{"location":"api/typing/#gspkit.typing.GraphModelType.SIGNED_ER","title":"<code>SIGNED_ER = 'signed-er'</code>","text":"<p>Signed Erd\u0151s-R\u00e9nyi graph. Implementation details can be at [gspkit.data.graphs.gen_signed_er]</p>"},{"location":"api/data/","title":"Data","text":"<p>Graph Generation</p> <p>Signal Generation</p>"},{"location":"api/data/graphs/","title":"Graphs","text":""},{"location":"api/data/graphs/#gspkit.data.graphs.gen_graph","title":"<code>gen_graph(n_nodes: int, model: typing.GraphModelType | str, model_params: dict, ensure_connected: bool = True, rng: typing.RNGType = None) -&gt; nx.Graph</code>","text":"<p>Generate a graph from a given graph model.</p> <p>This function is implemented to provide a single API point that can be called to generate graphs from different graph models.</p> <p>Parameters:</p> <ul> <li> <code>n_nodes</code>               (<code>int</code>)           \u2013            <p>Number of nodes.</p> </li> <li> <code>model</code>               (<code>GraphModelType | str</code>)           \u2013            <p>The graph model to use for generating the graph. Available options are listed below and their details can be found at GraphModelType.</p> Available Options <ul> <li><code>'er'</code></li> <li><code>'ba'</code></li> <li><code>'rgg'</code></li> <li><code>'signed-er'</code></li> <li><code>'signed-ba'</code></li> </ul> </li> <li> <code>model_params</code>               (<code>dict</code>)           \u2013            <p>The dictionary of parameters for the graph model. Parameters of the models differ and see model details for the parameters accepted by different models.</p> <p>Note</p> <p>Model implementations accept <code>rng</code> to set seed of random number generator. If <code>model_params</code> includes <code>rng</code>, it will be ignored. Seed setting should be done through <code>rng</code> argument of this function.</p> </li> <li> <code>ensure_connected</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Flag to ensure the generated graph is connected. The function keeps generating a new graph until generating a connected one. The function stops searching a connected graph after generating 500 graphs and returns an error. For signed graphs, connectedness is defined in terms of topology (signed of edges are ignored). By default True.</p> </li> <li> <code>rng</code>               (<code>RNGType</code>, default:                   <code>None</code> )           \u2013            <p>Random number generator.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>graph</code> (              <code>Graph</code> )          \u2013            <p>Generated graph. The returned graph might have node/edge attributed depending on <code>model</code>. Check the details of model used for these attributes.</p> </li> </ul>"},{"location":"api/data/graphs/#gspkit.data.graphs.gen_er","title":"<code>gen_er(n_nodes: int, p: float, rng: typing.RNGType = None) -&gt; nx.Graph</code>","text":"<p>Generate a graph from Erd\u0151s-R\u00e9nyi random graph model.</p> <p>This function is just a wrapper around NetworkX erdos_renyi_graph implemented to make its API consistent with the other graph generation functions.</p> <p>Parameters:</p> <ul> <li> <code>n_nodes</code>               (<code>int</code>)           \u2013            <p>Number of nodes.</p> </li> <li> <code>p</code>               (<code>float</code>)           \u2013            <p>Edge inclusion probability.</p> </li> <li> <code>rng</code>               (<code>RNGType</code>, default:                   <code>None</code> )           \u2013            <p>Random number generator.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>graph</code> (              <code>Graph</code> )          \u2013            <p>Generated graph.</p> </li> </ul>"},{"location":"api/data/graphs/#gspkit.data.graphs.gen_ba","title":"<code>gen_ba(n_nodes: int, m: int, rng: typing.RNGType = None) -&gt; nx.Graph</code>","text":"<p>Generate a graph from Barab\u00e1si\u2013Albert random graph model.</p> <p>This function is just a wrapper around NetworkX barabasi_albert_graph implemented to make its API consistent with the other graph generation functions.</p> <p>Parameters:</p> <ul> <li> <code>n_nodes</code>               (<code>int</code>)           \u2013            <p>Number of nodes.</p> </li> <li> <code>m</code>               (<code>int</code>)           \u2013            <p>Number of edges to attach to newly added node.</p> </li> <li> <code>rng</code>               (<code>RNGType</code>, default:                   <code>None</code> )           \u2013            <p>Random number generator.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>graph</code> (              <code>Graph</code> )          \u2013            <p>Generated graph.</p> </li> </ul>"},{"location":"api/data/graphs/#gspkit.data.graphs.gen_rgg","title":"<code>gen_rgg(n_nodes: int, sigma: float, th: float, rng: typing.RNGType = None) -&gt; nx.Graph</code>","text":"<p>Generate a random geometric graph.</p> <p>A random geometric graph is a graph generated from a 2-dimensional point cloud where points are drawn uniformly from unit square \\([0, 1]^2\\). In the generated graph, each point is a node and two nodes are connected with a binary edge if their similarity is larger than a threshold. Similarity of points are measured using RBF kernel. The implementation is based on [Kalofolias16].</p> <p>Parameters:</p> <ul> <li> <code>n_nodes</code>               (<code>int</code>)           \u2013            <p>Number of nodes.</p> </li> <li> <code>sigma</code>               (<code>float</code>)           \u2013            <p>Scale of the RBF kernel.</p> </li> <li> <code>th</code>               (<code>float</code>)           \u2013            <p>Threshold used to determine which nodes are connected.</p> </li> <li> <code>rng</code>               (<code>RNGType</code>, default:                   <code>None</code> )           \u2013            <p>Random number generator.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>graph</code> (              <code>Graph</code> )          \u2013            <p>Generated graph.</p> </li> </ul>"},{"location":"api/data/graphs/#gspkit.data.graphs.gen_signed_er","title":"<code>gen_signed_er(n_nodes: int, p: float, frac: float, rng: typing.RNGType = None) -&gt; nx.Graph</code>","text":"<p>Generate a graph from signed Erd\u0151s-R\u00e9nyi random graph model.</p> <p>This function first generates a graph from Erd\u0151s-R\u00e9nyi model. Then, it sets <code>frac</code> fraction of the generated graph edges as negative edges, while the other edges are considered as positive edges.</p> <p>Parameters:</p> <ul> <li> <code>n_nodes</code>               (<code>int</code>)           \u2013            <p>Number of nodes.</p> </li> <li> <code>p</code>               (<code>float</code>)           \u2013            <p>Edge inclusion probability of Erd\u0151s-R\u00e9nyi model.</p> </li> <li> <code>frac</code>               (<code>float</code>)           \u2013            <p>Fraction of edges to be set as negative edge.</p> </li> <li> <code>rng</code>               (<code>RNGType</code>, default:                   <code>None</code> )           \u2013            <p>Random number generator.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>graph</code> (              <code>Graph</code> )          \u2013            <p>Generated graph. Its edges has attribute <code>sign</code>, which is set to <code>1</code> for positive edges, and <code>-1</code> for negative edges.</p> </li> </ul>"},{"location":"api/data/graphs/#gspkit.data.graphs.gen_signed_ba","title":"<code>gen_signed_ba(n_nodes: int, m: int, frac: float, rng: typing.RNGType = None) -&gt; nx.Graph</code>","text":"<p>Generate a graph from signed Barab\u00e1si\u2013Albert random graph model.</p> <p>This function first generates a graph from Barab\u00e1si\u2013Albert model. Then, it sets <code>frac</code> fraction of the generated graph edges as negative edges, while the other edges are considered as positive edges.</p> <p>Parameters:</p> <ul> <li> <code>n_nodes</code>               (<code>int</code>)           \u2013            <p>Number of nodes.</p> </li> <li> <code>m</code>               (<code>int</code>)           \u2013            <p>Number of edges to attach to newly added node.</p> </li> <li> <code>frac</code>               (<code>float</code>)           \u2013            <p>Fraction of edges to be set as negative edge.</p> </li> <li> <code>rng</code>               (<code>RNGType</code>, default:                   <code>None</code> )           \u2013            <p>Random number generator.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>graph</code> (              <code>Graph</code> )          \u2013            <p>Generated graph. Its edges has attribute <code>sign</code>, which is set to <code>1</code> for positive edges, and <code>-1</code> for negative edges.</p> </li> </ul>"},{"location":"api/data/signals/","title":"Signals","text":""},{"location":"api/data/signals/#gspkit.data.signals.gen_signals","title":"<code>gen_signals(graph: nx.Graph, n_signals: int, fltr: typing.FilterType | str = 'gaussian', fltr_params: dict = {}, noise: float = 0.1, rng: typing.RNGType = None) -&gt; npt.NDArray</code>","text":"<p>Generate a set of graph signals from a given graph and filter type.</p> <p>Graph signals are generated by filtering a white noise graph signal through the input graph. In particular, let \\(\\mathbf{L}\\) be the Laplacian of the input graph. A graph signal \\(\\mathbf{x}\\) is generated by: </p> \\[  \\mathbf{x} = h(\\mathbf{L})\\mathbf{x}_0 + \\mathbf{e},  \\] <p>where \\(h(\\cdot)\\) is the graph filter, \\(\\mathbf{x}_0\\) is the input signal  and \\(\\mathbf{e}\\) is the additive noise. Both \\(\\mathbf{x}_0\\) and \\(\\mathbf{e}\\) are drawn from \\(\\mathcal{N}(\\mathbf{0}, \\mathbf{I})\\).</p> <p>Parameters:</p> <ul> <li> <code>graph</code>               (<code>Graph</code>)           \u2013            <p>Input graph.</p> </li> <li> <code>n_signals</code>               (<code>int</code>)           \u2013            <p>Number of signals to generate.</p> </li> <li> <code>fltr</code>               (<code>FilterType | str</code>, default:                   <code>'gaussian'</code> )           \u2013            <p>Graph filter to use to generate data. Available options are listed below and their details can be found at FilterType.</p> Available Options <ul> <li><code>'gaussian'</code></li> <li><code>'tikhonov'</code></li> <li><code>'heat'</code></li> </ul> </li> <li> <code>fltr_params</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Graph filter parameters. Some of the available filters accept parameters  that change their spectrum. These parameters can be provided as a  dictionary, which will be passed as arguments to the filter functions. See filter details to see parameters accepted by different filters.  If empty dictionary, default parameter values set in filter definitions  are used.</p> </li> <li> <code>noise</code>               (<code>float</code>, default:                   <code>0.1</code> )           \u2013            <p>Amount of Gaussian noise to add to generated graph signals. Amount of  noise is determined in L2-sense, that is  \\(||\\mathbf{e}||_2/||h(\\mathbf{L})\\mathbf{x}_0||_2\\) is set to <code>noise</code>.</p> </li> <li> <code>rng</code>               (<code>RNGType</code>, default:                   <code>None</code> )           \u2013            <p>Random number generator.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>signals</code> (              <code> </code> )          \u2013            <p>(N, <code>n_signals</code>) dimensional matrix whose columns are generated  signals, where N is the number of nodes.</p> </li> </ul>"}]}